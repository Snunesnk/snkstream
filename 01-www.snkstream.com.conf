# Snkstream Https server
server {
    listen 443 ssl; # managed by Certbot
    server_name    www.snkstream.com snkstream.com;

	# use a variable to store the upstream proxy
    # in this example we are using a hostname which is resolved via DNS
    # (if you aren't using DNS remove the resolver line and change the variable to point to an IP address e.g `set $jellyfin 127.0.0.1`)
    set $jellyfin 127.0.0.1;
    resolver 127.0.0.1 valid=30;

	index index.html;
    ssl_certificate /etc/letsencrypt/live/snkstream.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/snkstream.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
    add_header Strict-Transport-Security "max-age=31536000" always;
    ssl_trusted_certificate /etc/letsencrypt/live/snkstream.com/chain.pem;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Security / XSS Mitigation Headers
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";

    # Content Security Policy
    # See: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
    # Enforces https content and restricts JS/CSS to origin
    # External Javascript (such as cast_sender.js for Chromecast) must be whitelisted.
    add_header Content-Security-Policy "default-src https: data: blob:; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' https://www.gstatic.com/cv/js/sender/v1/cast_sender.js blob:; worker-src 'self' blob:; connect-src 'self'; object-src 'none'; frame-ancestors 'self'";

    # Main page
    location / {
        include proxy_params;
        proxy_pass https://127.0.0.1:4242;
    }

	# Access to Sonarr
	location /sonarr {
        include proxy_params;
		proxy_pass http://127.0.0.1:8989;
	}

	# Access to Radarr
	location /radarr {
        include proxy_params;
		proxy_pass http://127.0.0.1:7878;
	}

	# Access to transmission through proxy
	location /transmission {
        include proxy_params;
		proxy_pass http://127.0.0.1:8080;
	}

	# Access to Jackett
	location /jackett {
        include proxy_params;
		proxy_pass http://127.0.0.1:9117;
	}

	# Access to Jackett
	location /nzbget {
        include proxy_params;
		proxy_pass http://127.0.0.1:6789;
	}
}

# Snkstream Http server
server {
    if ($host = www.snkstream.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    if ($host = snkstream.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen    80;
    server_name    www.snkstream.com snkstream.com;
    return 404; # managed by Certbot
}


# Jellyfin Http server
server {
    if ($host = www.jellyfin.snkstream.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    if ($host = jellyfin.snkstream.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    listen 80;
    listen [::]:80;
    server_name jellyfin.snkstream.com www.jellyfin.snkstream.com;

    # Uncomment to redirect HTTP to HTTPS
    return 301 https://$host$request_uri;
}

# Jellyfin Https server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name jellyfin.snkstream.com www.jellyfin.snkstream.com;

    # use a variable to store the upstream proxy
    # in this example we are using a hostname which is resolved via DNS
    # (if you aren't using DNS remove the resolver line and change the variable to point to an IP address e.g `set $jellyfin 127.0.0.1`)
    set $jellyfin 127.0.0.1;
    resolver 127.0.0.1 valid=30;
    ssl_certificate /etc/letsencrypt/live/snkstream.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/snkstream.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    add_header Strict-Transport-Security "max-age=31536000" always;
    ssl_trusted_certificate /etc/letsencrypt/live/snkstream.com/chain.pem;
    ssl_stapling on;
    ssl_stapling_verify on;

    # Security / XSS Mitigation Headers
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";

    # Content Security Policy
    # See: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
    # Enforces https content and restricts JS/CSS to origin
    # External Javascript (such as cast_sender.js for Chromecast) must be whitelisted.
    add_header Content-Security-Policy "default-src https: data: blob:; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' https://www.gstatic.com/cv/js/sender/v1/cast_sender.js blob:; worker-src 'self' blob:; connect-src 'self'; object-src 'none'; frame-ancestors 'self'";

    location = / {
        return 302 https://$host/web/;
    }

    location / {
        # Proxy main Jellyfin traffic
        proxy_pass http://$jellyfin:8096;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;

        # Disable buffering when the nginx proxy gets very resource heavy upon streaming
        proxy_buffering off;
    }

    # location block for /web - This is purely for aesthetics so /web/#!/ works instead of having to go to /web/index.html/#!/
    location = /web/ {
        # Proxy main Jellyfin traffic
        proxy_pass http://$jellyfin:8096/web/index.html;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }

    location /socket {
        # Proxy Jellyfin Websockets traffic
        proxy_pass http://$jellyfin:8096;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }
}
